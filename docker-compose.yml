services:
  postgres_room_management:
    container_name: postgres_room_management
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /data/postgres
    volumes:
      - postgres_room_management:/data/postgres
    ports:
      - "5332:5432"
    networks:
      - microservice_network
    restart: unless-stopped

  postgres_booking_management:
    container_name: postgres_booking_management
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /data/postgres
    volumes:
      - postgres_booking_management:/data/postgres
    ports:
      - "5333:5432"
    networks:
      - microservice_network
    restart: unless-stopped

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    command:
      - start-dev
      - --import-realm
    volumes:
      - ./keycloak-realm.json:/opt/keycloak/data/import/keycloak-realm.json
    networks:
      - microservice_network

  zookeeper:
    image: 'confluentinc/cp-zookeeper:latest'
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'

  kafka:
    image: 'confluentinc/cp-kafka:latest'
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://localhost:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  redis:
    image: 'redis:latest'
    container_name: redis-server
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
    command: [ "redis-server", "--appendonly", "yes" ]

networks:
  microservice_network:
    driver: bridge

volumes:
  postgres_room_management:
  postgres_booking_management:
  redis-data: